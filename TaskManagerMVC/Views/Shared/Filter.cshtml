@model System.Object

@{
    string action = ViewContext.RouteData.Values["action"].ToString();
    string controller = ViewContext.RouteData.Values["controller"].ToString();
    string prefix = Model.GetType().GetProperty("Prefix").GetValue(Model).ToString();
    PropertyInfo[] properties = Model.GetType().GetProperties();
    Dictionary<PropertyInfo, FilterPropertyAttribute> editableProperties = new Dictionary<PropertyInfo, FilterPropertyAttribute>();
    Pager parentPager = (Pager)Model.GetType().GetProperty("ParentPager").GetValue(Model);

    foreach (PropertyInfo pi in properties)
    {
        object obj = pi.GetCustomAttribute(typeof(FilterPropertyAttribute));

        if (obj != null)
        {
            FilterPropertyAttribute attribute = (FilterPropertyAttribute)obj;
            editableProperties.Add(pi, attribute);
        }
    }
}

@using (Html.BeginForm(action, controller, FormMethod.Get))
{
    <div class="form-horizontal">

        @foreach (string key in Request.QueryString.Keys)
        {
            if (!key.StartsWith(prefix) && key != parentPager.Prefix + "CurrentPage")
            {
                @Html.Hidden(key, Request.QueryString[key]);
            }
        }

        @foreach (KeyValuePair<string, object> kvp in ViewContext.RouteData.Values)
        {
            if (kvp.Key != "controller" && kvp.Key != "action" && kvp.Key != parentPager.Prefix + "CurrentPage" && !kvp.Key.StartsWith(prefix))
            {
                @Html.Hidden(kvp.Key, kvp.Value);
            }
        }

        @foreach (KeyValuePair<PropertyInfo, FilterPropertyAttribute> prop in editableProperties)
        {
            <div class="form-group">
                @Html.Label(prop.Key.Name, prop.Value.DisplayName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @if (!string.IsNullOrEmpty(prop.Value.DropDownList))
                    {
                        @Html.DropDownList(prefix + prop.Key.Name, (SelectList)Model.GetType().GetProperty(prop.Value.DropDownList).GetValue(Model), new { @class = "form-control", id = prop.Key.Name })
                    }
                    else
                    {
                        @Html.TextBox(prefix + prop.Key.Name, prop.Key.GetValue(Model), new { @class = "form-control", id = prop.Key.Name })
                    }
                </div>
            </div>
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Search" class="btn btn-outline-info" />
            </div>
        </div>

    </div>
}